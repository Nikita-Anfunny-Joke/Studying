"""
В Python есть 2 вида циклов:

Циклы, повторяющиеся определенное количество раз (цикл for)
Циклы, повторяющиеся до наступления определенного события (цикл while).

FOR — пробегает по всем элементам и выполняет набор операций.
При помощи этого цикла можно пробегаться (итерироваться) по любому объекту-коллекции.

Если цикл for бегал по элементам из набора, то циклу WHILE не нужны никакие списки.
Он просто прогоняет код в своем теле цикла до тех пор, пока верно некое утверждение.
"""

# FOR

for a in [9, 16, 25]:
    print('считаем в цикле')
    print(a ** 0.5 + 1)
print('Пишем один раз')

# range(n) сгенерирует все числа от 0 до n-1 (последний не входит!)
# range очень часто встречается на практике, на нем остановимся детальнее
for i in range(5):
    print(i)

# range(start, stop) сгенерирует все числа от start до stop - 1
for i in range(1, 7):
    # f"что-то" называется f-string
    # через него можно подставить значение Python-выражения прямо в строку
    print(f'Квадрат числа {i} есть {i * i}')


# range(start, stop, step) генерирует от start до (stop - 1) с шагом step
even_numbers = []
for i in range(0, 14, 2):
    even_numbers.append(i)
print(even_numbers)

# WHILE

i = 0
while i < 5:
    print(i)
    i = i + 1
#Output: 0 1 2 3 4

# Здесь i никогда не бывает больше 5
#i = 0
#while i < 5:
#    print(i)

#Output: 0 0 0 0 ...




number = 34624
# Мы заранее не можем знать, сколько раз число поделится на 2 - тут и выручает while
while number % 2 == 0:  # кстати, number % 2 == 0 - имеет булевый тип
    print('делится на 2, делим')
    number //= 2 # то же самое, что number = number // 2
print(number)

#Output:
#делится на 2, делим
#делится на 2, делим
#делится на 2, делим
#делится на 2, делим
#делится на 2, делим
#делится на 2, делим
#541